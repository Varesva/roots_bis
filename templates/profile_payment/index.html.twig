{% extends 'base.html.twig' %}

{% block title %}
Paiement de votre commande
{% endblock %}

{% block body %}
	<h1>Paiement</h1>

	<section id="section_payment" class=" p-3">

		{# TARTEAUCITRON #}
		{# <div class="stripe w-75 h-25 position-absolute" style="margin-left: auto; margin-right: auto; left:0; right:0; text-align:center;"></div> #}

		<!-- Display a payment form -->
		<form id="payment-form" class="my-5 p-3 rounded-3"> 
			<div id="payment-element"> 
				<!--Stripe.js injects the Payment Element-->
			</div>

			<div class=" d-flex justify-content-center m-3">
				<button id="submit" class="btn btn-success font-weight-bold text-white">
					<div class="spinner hidden" id="spinner"></div>
					<span id="button-text">
						Payer
						{{ total_ttc }}â‚¬
					</span>
				</button>
			</div>

			<div id="error-message">				
				<!-- Display error message to your customers here -->
			</div>
			<div id="payment-message" class="hidden"></div>

		</form>
	</section>
{% endblock %}

{% block javascripts %}
	{{ parent() }}
	{# STRIPE API #}
	<script>
		const stripe = Stripe( "pk_test_51KquMELfBciygh7TnoJXg5vdJCTm6Vey9p0Q4mXEHpUkxxLwoNP7AorVW0mySoU8x4ZDRWQiii0nLDKhumnr1FWU005AFZWxGX" );

		const options = {
		clientSecret: '{{ clientSecret }}'
		};

		// Set up Stripe.js and Elements to use in checkout form, passing the client secret obtained in step 2
		const elements = stripe.elements( options );

		// Create and mount the Payment Element
		const paymentElement = elements.create( 'payment' );
		paymentElement.mount( '#payment-element' );

		const form = document.getElementById( 'payment-form' );


		form.addEventListener( 'submit', async ( event ) => {
		event.preventDefault();

		// Elements instance that was used to create the Payment Element
		// http://127.0.0.1:8000/purchase/payment/success/
		const { error } = await stripe.confirmPayment( {
		elements,
		confirmParams: {
		return_url: "{{ url('app_profile_payment_confirm') }}"
		}
		} );


		if ( error ) {
		// This point will only be reached if there is an immediate error when
		// confirming the payment. Show error to your customer (for example, payment
		// details incomplete)
		const messageContainer = document.querySelector( '#error-message' );
		messageContainer.textContent = error.message;
		} else {
		// Your customer will be redirected to your return_url. For some payment
		// methods like iDEAL, your customer will be redirected to an intermediate
		// site first to authorize the payment, then redirected to the return_url.
		}
		} );
	</script>


{% endblock %}
